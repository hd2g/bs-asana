// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Axios = require("bs-axios/lib/js/src/axios.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios$1 = require("axios");
var Js_dict = require("bs-platform/lib/js/js_dict.js");

function concat(param) {
  if (!param) {
    return "";
  }
  var tl = param.tl;
  var match = param.hd;
  var value = match[1];
  var key = match[0];
  if (tl) {
    return key + ("=" + (value + ("&" + concat(tl))));
  } else {
    return key + ("=" + value);
  }
}

function add(query, uri) {
  return uri + ("?" + concat(query));
}

var UriQuery = {
  concat: concat,
  add: add
};

var base_url = "https://app.asana.com/api/1.0";

function makeInstance(baseUrlOpt, token) {
  var baseUrl = baseUrlOpt !== undefined ? baseUrlOpt : base_url;
  var headers = Axios.$$Headers.fromDict(Js_dict.fromList({
            hd: [
              "Content-Type",
              "application/json"
            ],
            tl: {
              hd: [
                "Authorication",
                "Bearer " + token
              ],
              tl: /* [] */0
            }
          }));
  return Axios$1.create({
              baseURL: baseUrl,
              headers: headers
            });
}

function build(personalAccessToken, queryOpt, uri, methods) {
  var query = queryOpt !== undefined ? queryOpt : /* [] */0;
  var instance = makeInstance(undefined, personalAccessToken);
  var url = add(query, uri);
  return {
          instance: instance,
          url: url,
          methods: methods
        };
}

function get(builder) {
  return Curry._2(builder, "/users", /* Get */0);
}

function me(builder) {
  return Curry._2(builder, "/users/me", /* Get */0);
}

function get_user(userId, builder) {
  return Curry._1(builder, "/users/") + userId;
}

var Users = {
  get: get,
  me: me,
  get_user: get_user
};

var Client = {
  base_url: base_url,
  makeInstance: makeInstance,
  build: build,
  Users: Users
};

exports.UriQuery = UriQuery;
exports.Client = Client;
/* axios Not a pure module */
